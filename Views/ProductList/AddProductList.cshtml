@{
   var created_product=ViewBag.Created_Product;
   
   @* var create_status=ViewBag.Status; *@
   
   var cat_list =ViewBag.CategoryList as IEnumerable<Category>;
   
   @* var brand_list = ViewBag.BrandList as IEnumerable<Brand>;
   
   var sub_cat_list = ViewBag.SubCatList as List<SubCategory>;  *@


}


    
 
 <div
       class="bs-toast toast fade bg-success hide toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"
       data-bs-dismiss="toast"
        style="cursor: pointer;"
         data-delay="10000"
         data-bs-autohide="true" 
         data-bs-delay="10000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold">Thêm sản phẩm</div>
                      <!--<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>-->
                        </div>
                        <div class="toast-body">
                            Thêm sản phẩm thành công
                        </div>
                      </div>

    
      <div
       class="bs-toast toast toast-danger fade bg-danger hide toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"
       data-bs-dismiss="toast"
        style="cursor: pointer;"
         data-delay="10000"
         data-bs-autohide="true" 
         data-bs-delay="10000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold">Thêm sản phẩm</div>
                          <!--<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>-->
                        </div>
                        <div class="toast-body">
                          <p id="toast-message"></p>
                        </div>
                      </div>

         <div
       class="bs-toast toast toast-primary fade bg-primary hide toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"
       data-bs-dismiss="toast"
       style="cursor: pointer;"
       data-delay="3000"
         data-bs-autohide="true" 
         data-bs-delay="3000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold">Thêm sản phẩm</div>
                          <!--<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>-->
                        </div>
                        <div class="toast-body">

                          <p id="toast-message">Vui lòng chờ trong quá trình thêm sản phẩm</p>
                        </div>
                      </div>

    <div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4"><span class="text-muted fw-light">Sản phẩm /</span>Thêm sản phẩm</h4>
     <form id="formAccountSettings" method="post" asp-controller="ProductList" asp-action="AddProductList">
    <div class="d-flex justify-content-between align-items-start mb-3">
       <div class="nav nav-pills">
        <a class="nav-link active" href="javascript:void(0);"><i class="bx bx-cart-alt me-1"></i>Sản phẩm</a>
     </div>
     </div>
     <div class="card mb-3">
      <h5 class="card-header">Thông tin sản phẩm</h5>
        <hr class="my-0">
    <div class="card-body">
         <div class="mb-3">
                <label class="form-label">Chọn phương thức</label>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="inputOption" id="linkOption" value="link" checked>
                    <label class="form-check-label" for="linkOption">
                        Nhập Link sản phẩm
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="inputOption" id="fileOption" value="file">
                    <label class="form-check-label" for="fileOption">
                        Upload File Excel
                    </label>
                </div>
            </div>
       <div class="mb-5" id="linkInputGroup">
                <label for="linkInput" class="form-label">Nhập đường link sản phẩm</label>
                <input type="url" class="form-control mb-3" id="linkInput" placeholder="Nhập link sản phẩm" pattern="https?://.*">
                <div class="invalid-feedback">
                   Đường Link không hợp lệ
                </div>
                 <label for="linkBackground" class="form-label">Nhập đường link hình ảnh</label>
                <input type="url" class="form-control mb-3" id="linkBackground" placeholder="Nhập link hình ảnh" pattern="https?://.*">
                <div class="invalid-feedback">
                   Đường Link không hợp lệ
                </div>
                <label for="linkCategory" class="form-label mt-2">Loại sản phẩm</label>
                <select class="form-select" id="linkCategory1" name="category">
                    <option value="" disabled selected>Chọn loại sản phẩm</option>
                   @foreach(var item in cat_list)
                   {
                    <option value="@item.Id">@item.CategoryName</option>
                    }
                </select>
                <div class="invalid-feedback">
                    Cần chọn loại sản phẩm
                </div>
            </div>
           <div class="mb-7 d-none" id="fileInputGroup">
                <label for="fileInput" class="form-label">Upload File Excel</label>
                <input type="file" class="form-control" id="fileInput" accept=".xls,.xlsx">
                <div class="invalid-feedback">
                Chọn file không hợp lệ
                </div>
                <label for="fileCategory" class="form-label mt-2">Loại sản phẩm</label>
                <select class="form-select" id="linkCategory2" name="category" >
                    <option value="" disabled selected>Chọn loại sản phẩm</option>
                      @foreach(var item in cat_list)
                   {
                    <option value="@item.Id">@item.CategoryName</option>
                    }
                </select>
                <div class="invalid-feedback">
                    Cần chọn loại sản phẩm
                </div>
            </div>
             <div class="text-center">
            <button type="submit" id="submit-btn" class="btn btn-primary text-center">Thêm sản phẩm</button>
            </div>
    </div>
     </div>
     </form>
    </div>
    </div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <script>

    document.addEventListener("DOMContentLoaded",()=>
    {
      const linkOption = document.getElementById("linkOption");
      const fileOption = document.getElementById("fileOption");
      const linkInputGroup = document.getElementById("linkInputGroup");
      const fileInputGroup = document.getElementById("fileInputGroup");
      const input_link = document.getElementById("linkInput");
      const input_background = document.getElementById("linkBackground");
      const input_file = document.getElementById("fileInput");
      const link_category_1 = document.querySelector("#linkCategory1");
      const link_category_2 = document.querySelector("#linkCategory2");
      const form = document.getElementById("formAccountSettings");
      const submit_btn = document.getElementById("submit-btn");
      var links_product=[];
      var links_product=[];

      linkOption.addEventListener('change',()=>{
     if(linkOption.checked)
      {
        linkInputGroup.classList.remove("d-none");
        fileInputGroup.classList.add("d-none");
        input_file.value=null;
        link_category_2.selectedIndex=0;
      }
      })
      fileOption.addEventListener('change',()=>
      {
        if(fileOption.checked)
      {
        linkInputGroup.classList.add("d-none");
        fileInputGroup.classList.remove("d-none");
        input_link.value="";
        link_category_1.selectedIndex=0;
      }
      });

     form.addEventListener("submit",()=>
     {
      event.preventDefault();

      const formData = new FormData();
            
      if(linkOption.checked)
      {
        const link = input_link.value;

        const background = input_background.value;
        
        const category = document.getElementById("linkCategory1");
        
        if(link=='')
        {
         input_link.classList.add("is-invalid");

         return;         
        }

        if(background=='')
        {
         input_background.classList.add("is-invalid");

         return;         
        }

        if(category.selectedIndex==0)
        {
          category.classList.add("is-invalid");
          
          return;
        }
        
        input_link.classList.remove('is-invalid');
        
        formData.append("link",link);

        formData.append("link_background",background);
        
        formData.append("category",category.value);
      }
      else
      {
        const file = input_file.files[0];
        
        const category = document.getElementById("linkCategory2");
        
        if(category.selectedIndex==0)
        {
          category.classList.add("is-invalid");

          return;          
        }

        var link="";

        links_product.forEach((item,index)=>
        {
         link+=item+"\n";
        });

        var background="";

        links_img.forEach((item,index)=>
        {
         background+=item+"\n";
        });
        
        formData.append("link",link);

        formData.append("link_background",background);

        formData.append("category",category.value);

      }
     if(submit_btn!=null)
     {
      submit_btn.setAttribute("disabled",true);
     }
                    
                var toastEl = document.querySelector('.toast-primary');
                
                var toast = new bootstrap.Toast(toastEl);
                
                toast.show();

     $.ajax(
      {  
                url: '@Url.Action("GetSampleData", "ProductList")',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false, 
                success:function(response)
                { 
                  var status=response.status;
                  
                  var message=response.message;
               
                  submit_btn.disabled=false;
                                    
                  if(status== -1 || status==0)
                  {
                
                document.getElementById("toast-message").innerHTML=message;                
                
                var toastEl = document.querySelector('.toast-danger');
                
                var toast = new bootstrap.Toast(toastEl);
                                
                toast.show();
                }
                else
                {
                var toastEl = document.querySelector('.toast');
                
                var toast = new bootstrap.Toast(toastEl);
                
                toast.show(); 
                }

                },
                error: function(xhr, status, error) 
              {
                  alert(error);
                  
                  alert(error.message);
                  
                 submit_btn.disabled=false;
                 
                document.getElementById("toast-message").innerHTML=error;
                
                var toastEl = document.querySelector('.toast-danger');
                
                var toast = new bootstrap.Toast(toastEl);
                
                toast.show();  
              }
            });
     });

     const handleFile=(e)=>
     {
     const file = e.target.files[0];

     if(!file)
     {
        return;
     }

    const reader = new FileReader();

    reader.onload = (e) =>
    {
      try
      {
       const data = new Uint8Array(e.target.result);
       
       const workbook = XLSX.read(data, { type: 'array' });
       
       const sheetName = workbook.SheetNames[0];
       
       const worksheet = workbook.Sheets[sheetName];
      
       const rows = XLSX.utils.sheet_to_json(worksheet, { header: 1});

       var all_link_product=[];

       var all_link_img = [];
      
       rows.forEach((row,index)=>
       {
           all_link_product.push(row[0]);

           all_link_img.push(row[1]);
       });
       
       links_product=all_link_product;
       
       links_img=all_link_img;       
      }
      catch(error)
      {
        console.error("Error reading file:", error);
        
        alert("Error reading file"+error);
      }
    }
    reader.readAsArrayBuffer(file);    
    }

    input_file.addEventListener("change",handleFile);
    
    });

    </script>