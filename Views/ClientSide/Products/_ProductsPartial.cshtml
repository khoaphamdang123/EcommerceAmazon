@model PageList<Product>
@using System.Text.RegularExpressions;
@{
    string user_id=this.ViewContext.HttpContext.Session.GetString("UserName");
    
    Console.WriteLine("User Id here is:"+user_id);
    
    string product_count=Model.item.Count.ToString();
    

    Console.WriteLine("Count Product List:"+Model.item.Count);
    
    var count_reviews=ViewBag.count_reviews as Dictionary<string,int>;

    var current_tab=ViewBag.current_tab!=null ? ViewBag.current_tab : 0;

    int type=ViewBag.type!=null ? ViewBag.type : 1;
}
 <div
       class="bs-toast toast fade hide toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"
       data-bs-dismiss="toast"
       style="cursor: pointer; position: fixed; top: 20px; right: 20px; z-index: 5000;"
       data-delay="3000"
       data-bs-autohide="true" 
       data-bs-delay="3000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold" id="toast-title"></div>
                        </div>
                        <div class="toast-body" id="toast-message">
                        </div>
                        </div>
                        
                  <div class="product-grid mt-4">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach(var product in Model.item)
                {
                string regex_product=Regex.Replace(product.ProductName, @"[^\w\d+,]", "-");
                  <div class="col">
                    <div class="card border shadow-none">
                      <div class="position-relative overflow-hidden">
                        <div class="product-options d-flex align-items-center justify-content-center gap-2 mx-auto position-absolute bottom-0 start-0 end-0">
                          <a href="javascript:;"><i class="bi bi-basket3"></i></a>
                <a href="#" id="detail-product" data-bs-toggle="modal" data-bs-target="#QuickViewModal-@product.Id"><i
                    class="bi bi-zoom-in"></i></a>                        
                    </div>
                        <a href="@Url.Action("ProductDetail","ProductDetail",new{product_name=regex_product})">
                        @if(product.Backavatar!=null)
                        { @if(product.Backavatar.Contains("https") || product.Backavatar.Contains("http"))
                          {
                          <img src="@product.Backavatar" class="card-img-top" alt="...">
                          }
                          else
                          {
                            <img src="~/@product.Frontavatar.Substring(product.Frontavatar.IndexOf("wwwroot")+("wwwroot".Length+1))" class="card-img-top" alt="...">
                          }
                          }
                        </a>
                      </div>
                      <div class="card-body border-top">
                      <a href="@Url.Action("ProductDetail","ProductDetail",new{product_name=regex_product})">
                        <h5 class="mb-0 fw-bold product-short-title">@product.ProductName</h5>
                        </a>
                        <div class="product-price d-flex align-items-center gap-2 mt-2">
                          <div class="h6 fw-bold">$@product.Price</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  }
              </div>
            </div>

  @foreach(var product in Model.item)
    {
 <div class="modal fade" id="QuickViewModal-@product.Id" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
      <div class="modal-content rounded-0">
        <div class="modal-body">
          <div class="row g-3">
            <div class="col-12 col-xl-6">
              <div class="wrap-modal-slider">
                <div class="slider-for" id="slider-images">
                @if(!string.IsNullOrEmpty(product.Frontavatar))
                {
                 <div>
                    <img src="@product.Frontavatar" alt="" class="img-fluid">
                  </div>
                  }
                @if(!string.IsNullOrEmpty(product.Backavatar))
                {
                 <div>
                    <img src="@product.Backavatar" alt="" class="img-fluid">
                </div>
                }
                @foreach(var image in product.ProductImages)
                {
                  <div>
                    <img src="@image.Avatar" alt="" class="img-fluid">
                  </div>
                  @* <div>
                    <img src="@Url.Content("~/user_layout/images/product-images/02.jpg")" alt="" class="img-fluid">
                  </div>
                  <div>
                    <img src="@Url.Content("~/user_layout/images/product-images/03.jpg")" alt="" class="img-fluid">
                  </div>
                  <div>
                    <img src="@Url.Content("~/user_layout/images/product-images/04.jpg")" alt="" class="img-fluid">
                  </div> *@
                  }
                </div>

                <div class="slider-nav mt-3" id="slider-images-nav">
            @if(!string.IsNullOrEmpty(product.Frontavatar))
                {
                 <div>
                    <img src="@product.Frontavatar" alt="" class="img-fluid">
                  </div>
                  }
                @if(!string.IsNullOrEmpty(product.Backavatar))
                {
                 <div>
                    <img src="@product.Backavatar" alt="" class="img-fluid">
                  </div>
                  }
                    @foreach(var image in product.ProductImages)
                    {
                    <div>
                    <img src="@image.Avatar" alt="" class="img-fluid">
                  </div>    
                    }
                  @* <div>
                    <img src="@Url.Content("~/images/product-images/01.jpg")" alt="" class="img-fluid">
                  </div>
                  <div>
                    <img src="@Url.Content("~/images/product-images/02.jpg")" alt="" class="img-fluid">                    
                  </div>
                  <div>
                    <img src="assets/images/product-images/03.jpg" alt="" class="img-fluid">
                  </div>
                  <div>
                    <img src="assets/images/product-images/04.jpg" alt="" class="img-fluid">
                  </div> *@
                </div>

              </div>

            </div>
            <div class="col-12 col-xl-6">
              <div class="product-info">
                <h4 class="product-title fw-bold mb-1" id="product-detail-title">@product.ProductName</h4>
                <p class="mb-0" id="product-detail-description">@Html.Raw(product.Description)</p>
                @* <div class="product-rating">
                  <div class="hstack gap-2 border p-1 mt-3 width-content">
                    <div><span class="rating-number">4.8</span><i class="bi bi-star-fill ms-1 text-success"></i></div>
                    <div class="vr"></div>
                    <div>162 Ratings</div>
                  </div>
                </div> *@
                <hr>
                <div class="product-price d-flex align-items-center gap-3">
                  <div class="h4 fw-bold" id="product-detail-price">$@product.Price</div>
                  @* <div class="h5 fw-light text-muted text-decoration-line-through">$2089</div>
                  <div class="h4 fw-bold text-danger">(70% off)</div> *@
                </div>
                <p class="fw-bold mb-0 mt-1 text-success">inclusive of all taxes</p>

                <div class="more-colors mt-3">
                  <h6 class="fw-bold mb-3">More Colors</h6>
                  <div class="d-flex align-items-center gap-2 flex-wrap" id="product-detail-colors">
                    @foreach(var color in product.Variants.DistinctBy(x=>x.Color))
                    { 
                        if(color.Color==null)
                      {
                        continue;
                      }
                      <div class="color-box color-border" style="background-color:@color.Color?.Colorname" 
                      title="@color.Color?.Colorname"></div>
                    @* <div class="color-box bg-red"></div>
                    <div class="color-box bg-primary"></div>
                    <div class="color-box bg-yellow"></div>
                    <div class="color-box bg-purple"></div>
                    <div class="color-box bg-green"></div> *@
                    }
                  </div>
                </div>

                <div class="size-chart mt-3">
                  <h6 class="fw-bold mb-3">Select Size</h6>
                  <div class="d-flex align-items-center gap-2 flex-wrap" id="product-detail-sizes">
                    @foreach(var size in product.Variants.DistinctBy(x=>x.Size))
                    {
                    if(size.Size==null)
                    {
                        continue;
                    }

                    <div class="">
                        <button type="button" class="rounded-0" style="white-space:normal;wordWrap:break-word;">@size.Size?.Sizename</button>
                    </div>
                    @* <div class="">
                      <button type="button" class="rounded-0">XS</button>
                    </div>
                    <div class="">
                      <button type="button" class="rounded-0">S</button>
                    </div>
                    <div class="">
                      <button type="button" class="rounded-0">M</button>
                    </div>
                    <div class="">
                      <button type="button" class="rounded-0">L</button>
                    </div>
                    <div class="">
                      <button type="button" class="rounded-0">XL</button>
                    </div>
                    <div class="">
                      <button type="button" class="rounded-0">XXL</button>
                    </div> *@
                    }
                  </div>
                </div>
                <div class="cart-buttons mt-3">
                  <div class="buttons d-flex flex-column gap-3 mt-4">
                    <a href="javascript:;" class="btn btn-lg btn-dark btn-ecomm px-5 py-3 flex-grow-1"><i
                        class="bi bi-basket2 me-2"></i>Add to Cart</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>
    }       
    
         <hr class="my-4">

            <div class="product-pagination">
              <nav>
                <ul class="pagination justify-content-center">
               @if(Model.currentPage==1)
                     {
                        <li class="disabled page-item">
                            <a class="page-link" href="#" id="page-btn">
                               Prev
                            </a>
                        </li>
                     }
                        @if (Model.currentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("ProductsPaging", new {page_size=Model.pageSize, page = Model.currentPage-1,products=Model.item,type=type})" id="page-btn">
                                 Prev
                                </a>
                            </li>
                        }

                        @if (Model.totalPage > 6 && Model.currentPage > 4)
                        {
                            <li class="page-item"><a class="page-link" href="@Url.Action("ProductsPaging", new {page_size=Model.pageSize, page = 1,products=Model.item,type=type })" id="page-btn">1</a></li>
                            <li class="page-item"><span class="page-link">...</span></li>
                        }

                        @{
                            int startPage = Math.Max(1, Model.currentPage - 2);
                            
                            int endPage = Math.Min(Model.totalPage, Model.currentPage + 2);

                            if (Model.currentPage <= 3)
                            {
                                endPage = Math.Min(5, Model.totalPage);
                            }
                            else if (Model.currentPage >= Model.totalPage - 2)
                            {
                                startPage = Math.Max(Model.totalPage - 4, 1);
                            }

                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li  class="page-item">
                                    <a class="page-link" href="@Url.Action("ProductsPaging", new {page_size=Model.pageSize, page = i,products=Model.item,type=type })" id="page-btn" class="@(Model.currentPage== i ? "active" : "")">
                                        @i
                                    </a>
                                </li>
                            }
                        }

                        @if (Model.totalPage > 6 && Model.currentPage< Model.totalPage - 3)
                        {
                            <li class="page-item"><span>...</span></li>
                            <li><a class="page-link" href="@Url.Action("ProductsPaging", new {page_size=Model.pageSize, page = Model.totalPage,products=Model.item,type=type })"  id="page-btn">@Model.totalPage</a></li>
                        }

                        @* Next Button *@
                        @if (Model.currentPage < Model.totalPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("ProductsPaging", new {page_size=Model.pageSize, page = Model.currentPage+1,products=Model.item,type=type })"  id="page-btn">
                                   Next
                                </a>
                            </li>
                        }
                        @if (Model.currentPage == Model.totalPage)
                        {
                            <li class="disabled page-item">
                                <a class="page-link" href="@Url.Action("ProductsPaging", new {page_size=Model.pageSize, page = Model.currentPage,products=Model.item,type=type })" id="page-btn">
                                Next
                                </a>
                            </li>
                        }
                </ul>
              </nav>
            </div>

          
                  @* <li class="page-item active"><a class="page-link" href="javascript:;">1</a></li>
                  <li class="page-item"><a class="page-link" href="javascript:;">2</a></li>
                  <li class="page-item"><a class="page-link" href="javascript:;">3</a></li> *@

<script>
    document.addEventListener('DOMContentLoaded', function () {
      var boxes = document.querySelectorAll(".color-box");
      boxes.forEach(box => {
      box.addEventListener('click', () => {
        boxes.forEach(b => b.classList.remove('clicked'));
        box.classList.add('clicked'); 
      });
    });
    });
</script>