 
 @model List<CartModel>
 @using System.Globalization;
 @using System.Text.RegularExpressions;
 @inject IHttpContextAccessor HttpContextAccessor
 @{
    Layout="_UserLayout";
    @* var user=ViewBag.user as ApplicationUser;
    var company_user=  ViewBag.company as ApplicationUser;
    var payment_methods=ViewBag.payment_methods as List<Payment>;
    Console.WriteLine(payment_methods.Count); *@
    int total_value=0;
    var siteKey=ViewBag.SiteKey;
    var message_checkout=ViewBag.Message;
    var status_checkout = ViewBag.Status;
    var account= ViewBag.Account;
    var saved_account= ViewBag.SavedAccount;
    string paypal_client_id=Environment.GetEnvironmentVariable("PAYPAL_CLIENT_ID");
    string username="";
    string password="";

    Dictionary<string,string> countries = ViewBag.Countries as Dictionary<string,string>;

    Dictionary<string,List<string>> cities = ViewBag.Cities as Dictionary<string,List<string>>;

    
 @* if(account!=null)
  {  string[] account_part=account.Split('\n');s
     username=account_part[0];
     password=account_part[1];
  } *@
    
    @* string[] email_list=company_user.Email.Split('#');
    
    string email=email_list[0];
    
    string extra_info=email_list[1];
    
    string bank_name="";
    
    string account_num="";
    
    string account_name="";
    
    string bank_value="";

    string qr_code=Environment.GetEnvironmentVariable("qr_code");    

    if(!string.IsNullOrEmpty(extra_info))
    {
      string[] info_values=extra_info.Split('\n');

      foreach(var info in info_values)
      {
        if(info.Contains("bank_name"))
        {
          bank_value=info.Split('~')[1].Trim();
        }
        else if(info.Contains("account_name"))
        {
          account_name=info.Split('~')[1].Trim();
        }
        else if(info.Contains("account_num"))
        {
       account_num=info.Split('~')[1].Trim();
        }
      }
    } *@
    @* if(!string.IsNullOrEmpty(bank_value))
    {
      var bank_detail=bank_value.Split('*');
      bank_name=bank_detail[0];
    } *@

    double total_amount=0;
    
    double total_delivery=Model.Count>0?5:0;

    
     string user = HttpContextAccessor.HttpContext.Session.GetString("UserName");
     string email= HttpContextAccessor.HttpContext.Session.GetString("Email");
     string phone=  HttpContextAccessor.HttpContext.Session.GetString("PhoneNumber");
     string address= HttpContextAccessor.HttpContext.Session.GetString("Address");
     string zipcode = HttpContextAccessor.HttpContext.Session.GetString("ZipCode");
     string last_name="";
     string first_name="";

     string country_name=HttpContextAccessor.HttpContext.Session.GetString("Country");
    
    string state = HttpContextAccessor.HttpContext.Session.GetString("State");
    
    string city = HttpContextAccessor.HttpContext.Session.GetString("City");


     if(!string.IsNullOrEmpty(user))
     {
        var user_parts=user.Split(' ');

        last_name=user_parts.Length>1 ? user_parts[1] : "";

        first_name=user_parts.Length>1 ? user_parts[0] : "";
     }
    
    foreach(var item in Model)
    {
        double discount=string.IsNullOrEmpty(item.Product.Discount.ToString()) ? 0 : Convert.ToInt32(item.Product.Discount);
        
        string price_value=!string.IsNullOrEmpty(item.Price) ? item.Price : item.Product.Price;
        
        price_value=price_value.Replace("$","").Replace(",",".");
        
        double current_price=(double.Parse(price_value,CultureInfo.InvariantCulture)-(double.Parse(price_value,CultureInfo.InvariantCulture)*(discount)/100));
        
        total_amount+=current_price*item.Quantity;           
    }

    Console.WriteLine("Sitekey here is:"+siteKey);     
 } 
 @if(status_checkout==0)
 {
 <div
       class="bs-toast toast fade hide bg-danger toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"
        data-bs-dismiss="toast"
        style="cursor: pointer;"
         data-delay="3000"
         data-bs-autohide="true" 
         data-bs-delay="3000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold">Đặt hàng</div>
                        </div>
                        <div class="toast-body">
                         @(message_checkout)                         
                        </div>
                      </div>
        <script>

            document.addEventListener('DOMContentLoaded', function() 
            {
                var toastEl = document.querySelector('.toast');
                
                var toast = new bootstrap.Toast(toastEl);                
                
                toast.show();                
            });

        </script>         
        }

@Html.AntiForgeryToken()        
  

  <div
       class="bs-toast toast fade hide toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"       
       data-bs-dismiss="toast"
       style="cursor: pointer; position: fixed; top: 20px; right: 20px; z-index: 1050;"
       data-delay="3000"
       data-bs-autohide="true" 
       data-bs-delay="3000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold" id="toast-title"></div>
                        </div>
                        <div class="toast-body" id="toast-message">
                        </div>
    </div>
        
  <div class="page-content">
   <div class="py-5 border-bottom">
    <div class="container">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb mb-0"> 
          <li class="breadcrumb-item"><a href="@Url.Action("HomePage","HomePage")">Home</a></li>
          <li class="breadcrumb-item"><a href="@Url.Action("Cart","Cart")">Cart</a></li>
          <li class="breadcrumb-item active" aria-current="page">Checkout</li>
        </ol>
      </nav>
    </div>
   </div> 
	<section class="py-5">
					<div class="container">
						<div class="shop-cart">
							<div class="row">
								<div class="col-12 col-xl-8">
									<div class="checkout-details">
										<div class="card bg-transparent rounded-0 shadow-none">
											<div class="card-body">
												<div class="steps steps-light">
													<a class="step-item active" href="@Url.Action("Cart","Cart")">
														<div class="step-progress"><span class="step-count">1</span>
														</div>
														<div class="step-label"><i class='bx bx-cart'></i>Cart</div>
													</a>

													<a class="step-item active current" href="@Url.Action("Checkout","Checkout")">
														<div class="step-progress"><span class="step-count">2</span>
														</div>
														<div class="step-label"><i class='bx bx-user-circle'></i>Details</div>
													</a>
											
													<a class="step-item" href="@Url.Action("CheckoutPayment","Checkout",new{id=HttpContextAccessor.HttpContext.Session.GetString("UserId")})">
														<div class="step-progress"><span class="step-count">3</span>
														</div>
														<div class="step-label"><i class='bx bx-credit-card'></i>Payment</div>
													</a>
													<a class="step-item" href="@Url.Action("CheckoutReview","Checkout",new{id=HttpContextAccessor.HttpContext.Session.GetString("UserId")})">
														<div class="step-progress"><span class="step-count">4</span>
														</div>
														<div class="step-label"><i class='bx bx-check-circle'></i>Review</div>
													</a>
												</div>
											</div>
										</div>
										<div class="card rounded-0">
											<div class="card-body">
												<div class="border p-3">
													<h2 class="h5 mb-0">Shipping Address</h2>
													<div class="my-3 border-bottom"></div>
													<div class="form-body">
														<form class="row g-3" id="checkout-form" novalidate asp-action="CheckoutPaymentForm" asp-controller="Checkout">
															<div class="col-md-6">
																<label class="form-label">First Name</label>
																<input type="text" class="form-control rounded-0" value="@first_name" placeholder="Input Your Firstname" name="first_name" required>
                                                               <div class="invalid-feedback">
                                                                Please enter a valid first name.
		                                                    </div>
															</div>
															<div class="col-md-6">
																<label class="form-label">Last Name</label>
																<input type="text" class="form-control rounded-0" value="@last_name" placeholder="Input Your Last Name" name="last_name" required>
                                                               <div class="invalid-feedback">
                                                                Please enter a last name.
		                                                    </div>
															</div>
															<div class="col-md-6">
																<label class="form-label">E-mail</label>
																<input type="text" class="form-control rounded-0" value="@email" placeholder="Input Your Email" name="email" required>
															</div>
															<div class="col-md-6">
																<label class="form-label">Phone Number</label>
																<input type="text" class="form-control rounded-0" value="@phone" placeholder="Input Your Phonenumber" name="phone_number" required>
                                                             <div class="invalid-feedback">
                                                                Please enter a valid phone number.
		                                                    </div>
															</div>

                                                        	<div class="col-md-6">
																<label class="form-label">Country</label>
                                                                <select class="form-select rounded-0" name="country" id="countryname" required>
                                                                    <option value="">Select Country</option>
                                                                    @foreach(var country in countries)
                                                                    {   if(country.Value==country_name) 
                                                                    {
                                                                        <option value="@country.Value" selected>@country.Key</option>
                                                                    }
                                                                    else
                                                                    {
                                                                        <option value="@country.Value">@country.Key</option>
                                                                    }
                                                                    }
                                                                </select>
                                                             <div class="invalid-feedback">
                                                                Please select a valid country.
		                                                    </div>
															</div>

                                                            	<div class="col-md-6">
																<label class="form-label">State</label>
                                                                <select class="form-select rounded-0" name="state" id="state" required>
                                                                    <option value="">Select State</option>
                                                                    @if(!string.IsNullOrEmpty(state))
                                                                    {
                                                               <option value="@state" selected>@state</option>
                                                                    }
                                                                </select>
                                                             <div class="invalid-feedback">
                                                                Please enter a valid state name.
		                                                    </div>
															</div>
                                                        
                                                        	<div class="col-md-6">
																<label class="form-label">City</label>
                                                                <select class="form-select rounded-0" name="city" id="city" required>
                                                                    <option value="">Select City</option>
                                                                    @if(!string.IsNullOrEmpty(city))
                                                                    {
                                                                        <option value="@city" selected>@city</option>
                                                                    }
                                                                </select>
                                                             @* <div class="invalid-feedback">
                                                                Please enter a valid city name.
		                                                    </div> *@
															</div>

                                                    
															<div class="col-md-6">
																<label class="form-label">Zip/Postal Code</label>
																<input type="text" class="form-control rounded-0" placeholder="Input Your Zip Code" value="@zipcode" name="zip_code" required>
                                                            <div class="invalid-feedback">
                                                                Please enter a valid zip code.                                                                
		                                                    </div>
															</div>
														
															<div class="col-md-6">
																
                                                                <label class="form-label">Billing Address 1 </label>
																
                                                                <textarea class="form-control rounded-0" id="address1" placeholder="Input Your Address" value="@address" name="address1">@address</textarea>
                                                               
                                                               <div class="invalid-feedback">
                                                                Please enter a valid address.                                                                
                                                            </div>
                                                            </div>
                                                            	<div class="col-md-6">
																<label class="form-label">Billing Address 2 </label>
																<textarea class="form-control rounded-0" id="address2" placeholder="Input your backup address" value="@address" name="address2">@address</textarea>
															</div>
															<div class="col-md-6">
															  <div class="d-grid">	
                                                                <a href="@Url.Action("Cart","Cart")" class="btn btn-light btn-ecomm"><i class='bx bx-chevron-left'></i>Back to Cart</a>
															  </div>
															</div>
															<div class="col-md-6">
																<div class="d-grid">	
                                                                  <a href="javascript:void(0)" id="proceed-btn" class="btn btn-dark btn-ecomm">Proceed to Checkout<i class='bx bx-chevron-right'></i></a>
																</div>
															</div>
														</form>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-12 col-xl-4">
									<div class="order-summary">
										<div class="card rounded-0">
											<div class="card-body">
												<div class="card rounded-0 border bg-transparent shadow-none">
													<div class="card-body">
														<p class="fs-5">Order summary</p>
                                                    @foreach(var item in Model)
                                                    {
                                                    string regex_product=Regex.Replace(item.Product.ProductName, @"[^\w\d+,]", "-");

													<div class="my-3 border-top"></div>

                        <div class="d-flex align-items-center">
                          <a class="d-block flex-shrink-0" href="@Url.Action("ProductDetail","ProductDetail",new{product_name=regex_product})">
                         @if(item.Product.Backavatar.Contains("https") || item.Product.Backavatar.Contains("http"))
                          {
                          <img src="@item.Product.Backavatar"  style="width:75px !important;" class="card-img-top" alt="...">
                          }
                          else
                          {
                            <img src="~/@item.Product.Backavatar.Substring(item.Product.Backavatar.IndexOf("wwwroot")+("wwwroot".Length+1))" style="width:75px!important;" class="card-img-top" alt="...">
                          }															
                        </a>
															<div class="ps-2">
																<h6 class="mb-1"><a href="javascript:;" class="text-dark">@item.Product.ProductName</a></h6>
																<div class="widget-product-meta"><span class="me-2">@item.Price</span><span class="">x @item.Quantity</span>
																</div>
															</div>
														</div>
                                                        }													
													</div>
												</div>
												<div class="card rounded-0 border bg-transparent mb-0 shadow-none">
													<div class="card-body">
														<p class="mb-2">Subtotal: <span class="float-end">$@total_amount</span>
														</p>
														<p class="mb-2">Shipping: <span class="float-end">$@total_delivery</span>
														</p>
														<div class="my-3 border-top"></div>
														<h5 class="mb-0">Order Total: <span class="float-end">$@((total_amount+total_delivery).ToString("F2"))</span></h5>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
							<!--end row-->
						</div>
					</div>
				</section>
    </div>
  

<script src="https://www.paypal.com/sdk/js?client-id=@paypal_client_id" data-namespace="paypal_sdk"></script>


<script>
    document.addEventListener("DOMContentLoaded",()=>{

          var selected_country = document.getElementById('countryname');

          var selected_state = document.getElementById('state');

          var selected_city = document.getElementById('city');

          var proceedBtn= document.getElementById("proceed-btn");
          
          var form = document.getElementById("checkout-form");
          
          if(proceedBtn)
          {
            let isValid = true;

            proceedBtn.addEventListener("click",(e)=>{
                
            const input=document.querySelectorAll("input[required]");

            const text_area = document.getElementById("address1");

            const sub_area = document.getElementById("address2");

            input.forEach((i)=>{
               
               if(!i.value.trim())
               {
                 i.classList.add('is-invalid');
                
                 isValid = false;
               }
               else
               {
                i.classList.remove('is-invalid');
               }

                });
               if(!text_area.value.trim())
               {
                 text_area.classList.add('is-invalid');
                 
                 isValid = false;
               }
               else
               {
                text_area.classList.remove('is-invalid');
               }

               if(selected_country.value=='')
               {
                selected_country.classList.add('is-invalid');
                
                isValid = false;
               }
               else
               {
                selected_country.classList.remove('is-invalid');
               }


                if(selected_state.value=='')
                {
                    selected_state.classList.add('is-invalid');
                    
                    isValid = false;
                }
                else
                {
                    selected_state.classList.remove('is-invalid');
                }

                @* if(selected_city.value=='')
                {
                    selected_city.classList.add('is-invalid');
                    isValid = false;
                }
                else
                {
                    selected_city.classList.remove('is-invalid');
                } *@

                if(isValid)
                {
                    form.submit();
                }
                else
                {
                    e.preventDefault();                    
                }
            });         
          }
        selected_country.addEventListener('change',()=>
        {  
            const country = selected_country.selectedOptions[0].value;

           
            if(country!='')
            {  
             var countryname =selected_country.selectedOptions[0].text;
             
             var formData = new FormData();

             formData.append("country", countryname);
                          

                $.ajax({
                url: "@Url.Action("GetStateByCountry","Checkout")",
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function(response) 
                {
                 var list_state = response.data;

                 if(list_state!=null && list_state.length>0)
                 { 
                    while(document.getElementById("state").options.length > 1) 
                    {
                        document.getElementById("state").remove(1);
                    }
                   
                    list_state.forEach((state) => 
                    {
                        var option = document.createElement("option");
                        option.value = state.name;
                        option.textContent = state.name;
                        document.getElementById("state").appendChild(option);
                    });
                 }

                },
                error: function(xhr, status, error) 
                {
                 alert("Có lỗi xảy ra khi lấy danh sách thành phố: " + xhr.responseText);
                }
            });
            }
        });

        selected_state.addEventListener('change',()=>
        {
           var state = selected_state.selectedOptions[0].value;

           var country = selected_country.selectedOptions[0].text;

           if(country!='' && state!='')
           {
            var formData = new FormData();

            formData.append("country", country);
            
            formData.append("state", state);

            $.ajax(
                {
                url: "@Url.Action("GetCityByState","Checkout")",
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function(response) 
                {   
                    var list_city = response.data;

                    if(list_city!=null && list_city.length>0)
                    {
                  while(document.getElementById("city").options.length > 1) 
                    {
                        document.getElementById("city").remove(1);
                    }

                   
                    list_city.forEach((city) => 
                    {
                        var option = document.createElement("option");
                        option.value = city;
                        option.textContent = city;
                        document.getElementById("city").appendChild(option);
                    });                    
                    }
                  
                },
                error: function(xhr, status, error) 
                {
                 alert("Error whiler retrieving a list of city: " + xhr.responseText);
                }
            });
           }
        });
    });
</script>
      