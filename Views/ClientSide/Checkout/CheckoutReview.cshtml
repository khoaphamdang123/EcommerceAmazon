 
 @model List<CartModel>
 @using System.Globalization;
 @using System.Text.RegularExpressions;
 @inject IHttpContextAccessor HttpContextAccessor
 @{
    Layout="_UserLayout";
    var user=ViewBag.user as ApplicationUser;
    var company_user=  ViewBag.company as ApplicationUser;
    var payment_methods=ViewBag.payment_methods as List<Payment>;
    Console.WriteLine(payment_methods.Count);
    int total_value=0;
    var siteKey=ViewBag.SiteKey;
    var message_checkout=ViewBag.Message;
    var status_checkout = ViewBag.Status;
    var account= ViewBag.Account;
    var saved_account= ViewBag.SavedAccount;
    string paypal_client_id=Environment.GetEnvironmentVariable("PAYPAL_CLIENT_ID");
     string username="";
     string password="";
 if(account!=null)
  {  string[] account_part=account.Split('\n');
     username=account_part[0];
     password=account_part[1];
  }

    string user_name = HttpContextAccessor.HttpContext.Session.GetString("UserName");
    
    string email= HttpContextAccessor.HttpContext.Session.GetString("Email");
    
    string phone=  HttpContextAccessor.HttpContext.Session.GetString("PhoneNumber");
    
    string address= HttpContextAccessor.HttpContext.Session.GetString("Address");
    
    string zipcode = HttpContextAccessor.HttpContext.Session.GetString("ZipCode");
    
    string payment_method=HttpContextAccessor.HttpContext.Session.GetString("PaymentMethod");
    
    string country=HttpContextAccessor.HttpContext.Session.GetString("Country");
    
    string state = HttpContextAccessor.HttpContext.Session.GetString("State");
    
    string city = HttpContextAccessor.HttpContext.Session.GetString("City");
    
    double total_amount=0;
    
    double total_delivery=Model.Count>0?5:0;
    
    foreach(var item in Model)
    {
        double discount=string.IsNullOrEmpty(item.Product.Discount.ToString()) ? 0 : Convert.ToInt32(item.Product.Discount);
        
        string price_value=!string.IsNullOrEmpty(item.Price) ? item.Price : item.Product.Price;
        
        price_value=price_value.Replace("$","").Replace(",",".");
        
        double current_price=(double.Parse(price_value,CultureInfo.InvariantCulture)-(double.Parse(price_value,CultureInfo.InvariantCulture)*(discount)/100));
        
        total_amount+=current_price*item.Quantity;           
    }

    double total_payment=total_amount+total_delivery;

    Console.WriteLine("Sitekey here is:"+siteKey);     
 } 

 <div
       class="bs-toast toast fade hide bg-danger toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"
        data-bs-dismiss="toast"
        style="cursor: pointer;"
         data-delay="3000"
         data-bs-autohide="true" 
         data-bs-delay="3000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold" id="toast-title-error"></div>
                        </div>
                        <div class="toast-body" id="toast-message-error">
                        </div>
                      </div>
           


@Html.AntiForgeryToken()        
  
  <div
       class="bs-toast toast fade hide toast-placement-ex top-5 end-0"
       role="alert"
       aria-live="assertive"
       aria-atomic="true"       
       data-bs-dismiss="toast"
       style="cursor: pointer; position: fixed; top: 20px; right: 20px; z-index: 1050;"
       data-delay="3000"
       data-bs-autohide="true" 
       data-bs-delay="3000"
             >
                        <div class="toast-header">
                          <i class="bx bx-bell me-2"></i>
                          <div class="me-auto fw-semibold" id="toast-title"></div>
                        </div>
                        <div class="toast-body" id="toast-message">
                        </div>
    </div>
    
    
    <div class="page-content">
   <div class="py-5 border-bottom">
    <div class="container">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb mb-0"> 
          <li class="breadcrumb-item"><a href="@Url.Action("HomePage","HomePage")">Home</a></li>
          <li class="breadcrumb-item"><a href="@Url.Action("Cart","Cart")">Cart</a></li>
          <li class="breadcrumb-item active" aria-current="page">Checkout</li>
        </ol>
      </nav>
    </div>
   </div> 
	<section class="py-5">
					<div class="container">
						<div class="shop-cart">
							<div class="row">
								<div class="col-12 col-xl-8">
									<div class="checkout-review">
										<div class="card bg-transparent rounded-0 shadow-none">
											<div class="card-body">
												<div class="steps steps-light">
													<a class="step-item active" href="@Url.Action("Cart","Cart")">
														<div class="step-progress"><span class="step-count">1</span>
														</div>
														<div class="step-label"><i class='bx bx-cart'></i>Cart</div>
													</a>
													<a class="step-item active" href="@Url.Action("Checkout","Checkout")">
														<div class="step-progress"><span class="step-count">2</span>
														</div>
														<div class="step-label"><i class='bx bx-user-circle'></i>Details</div>
													</a>

													<a class="step-item active" href="@Url.Action("CheckoutPayment","Checkout",new{id=HttpContextAccessor.HttpContext.Session.GetString("UserId")})">
														<div class="step-progress"><span class="step-count">3</span>
														</div>
														<div class="step-label"><i class='bx bx-credit-card'></i>Payment</div>
													</a>
													<a class="step-item active current" href="@Url.Action("CheckoutReview","Checkout",new{id=HttpContextAccessor.HttpContext.Session.GetString("UserId")})">
														<div class="step-progress"><span class="step-count">4</span>
														</div>
														<div class="step-label"><i class='bx bx-check-circle'></i>Review</div>
													</a>
												</div>
											</div>
										</div>
										<div class="card  rounded-0 shadow-none mb-3 border">
											<div class="card-body">
												<h5 class="mb-0">Review Your Order</h5>
												<div class="my-3 border-bottom"></div>
                                            @foreach(var item in Model)
                                            {
												<div class="row align-items-center g-3">
													<div class="col-12 col-lg-6">
														<div class="d-lg-flex align-items-center gap-3">
													      <div class="cart-img text-center text-lg-start">
                       @if(item.Product.Backavatar.Contains("https") || item.Product.Backavatar.Contains("http"))
                          {
                          <img src="@item.Product.Backavatar" style="width:75px!important;" class="card-img-top" alt="...">
                          }
                          else
                          {
                            <img src="~/@item.Product.Backavatar.Substring(item.Product.Backavatar.IndexOf("wwwroot")+("wwwroot".Length+1))" style="width:75px!important;" class="card-img-top" alt="...">
                          }									</div>
															<div class="cart-detail text-center text-lg-start">
																<h6 class="mb-2">@item.Product.ProductName</h6>
																<p class="mb-0">Size:<span>@item.Size</span>
																</p>
																<p class="mb-2">Color: <span>@item.Color</span>
																</p>
																<h5 class="mb-0">@item.Price</h5>
															</div>
														</div>
													</div>
													<div class="col-12 col-lg-3">
														<div class="cart-action text-center">
															<input type="number" id="new-quantity-item" class="form-control rounded-0" value="@item.Quantity" min="1">
														</div>
													</div>
													<div class="col-12 col-lg-3">
														<div class="text-center">
															<div class="d-flex gap-2 justify-content-center justify-content-lg-end"> <a href="javascript:;"  id="remove-item" data-product-id="@item.Product.Id" class="btn btn-light rounded-0 btn-ecomm"><i class='bx bx-x-circle me-0'></i></a>
																<a href="javascript:;" id="update-quantity-item" data-product-id="@item.Product.Id" class="btn btn-light rounded-0 btn-ecomm"><i class='bx bx-edit'></i>Update</a>
															</div>
														</div>
													</div>
												</div>
												<div class="my-4 border-top"></div>
                                                }
											</div>
										</div>
										<div class="card rounded-0 shadow-none mb-3 border">
											<div class="card-body">
												<div class="row">
													<div class="col-md-6">
														<div class="shipping-aadress">
															<h5 class="mb-3">Shipping to:</h5>
															<p class="mb-1"><span class="text-dark">Customer:</span>@user_name</p>
															<p class="mb-1"><span class="text-dark">Address:</span> @address</p>
															<p class="mb-1"><span class="text-dark">Phone:</span>@phone</p>
                              <p class="mb-1"><span class="text-dark">Email:</span>@email</p>
                              <p class="mb-1"><span class="text-dark">Zip Code:</span>@zipcode</p>
                              <p class="mb-1"><span class="text-dark">Country Code:</span>@country</p>
                              <p class="mb-1"><span class="text-dark">State:</span>@state</p>
                              <p class="mb-1"><span class="text-dark">City:</span>@city</p>
														</div>
													</div>
													<div class="col-md-6">
														<div class="payment-mode">
															<h5 class="mb-3">Payment Method:</h5>
                              @if(!string.IsNullOrEmpty(payment_method))
                              {
                                @if(payment_method=="Paypal")
                                {
                            <img src="~/UploadImageBanner/paypal.png" width="150" class="p-2 border bg-light rounded" alt="">                            
                                }
                                else @if(payment_method=="Credit Card")
                                {
                            <img src="~/UploadImageBanner/visa.png" width="150" class="p-2 border bg-light rounded" alt="">
                                }
                              }
														</div>
													</div>
												</div>
											</div>
										</div>
										<div class="card rounded-0 shadow-none mb-3 border">
											<div class="card-body">
												<div class="row">
													<div class="col-md-6">
														<div class="d-grid"><a href="@Url.Action("CheckoutPayment","CheckoutPayment")" class="btn btn-light btn-ecomm"><i class="bx bx-chevron-left"></i>Back to Payment</a>
														</div>
													</div>
													<div class="col-md-6">
                           @if(payment_method=="Paypal")
                           {
                           <div class="d-grid" id="checkout-complete"></div> 
                           }
                           else
                           {
														<div class="d-grid"><a href="checkout-complete.html" id="checkout-complete" class="btn btn-outline-dark btn-ecomm">Complete Order<i class="bx bx-chevron-right"></i></a>
														</div>
                            }
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="col-12 col-xl-4">
									<div class="order-summary">
										<div class="card rounded-0">
											<div class="card-body">
												<div class="card rounded-0 border bg-transparent shadow-none">
													<div class="card-body">
														<p class="fs-5">Order summary</p>
                         @foreach(var item in Model)
                        {
                            string regex_product=Regex.Replace(item.Product.ProductName, @"[^\w\d+,]", "-");
														<div class="my-3 border-top"></div>
														<div class="d-flex align-items-center">
														<a class="d-block flex-shrink-0" href="@Url.Action("ProductDetail","ProductDetail",new{product_name=regex_product})">
                        @if(item.Product.Backavatar.Contains("https") || item.Product.Backavatar.Contains("http"))
                          {
                          <img src="@item.Product.Backavatar" style="width:75px !important;" class="card-img-top" alt="...">
                          }
                          else
                          {
                            <img src="~/@item.Product.Backavatar.Substring(item.Product.Backavatar.IndexOf("wwwroot")+("wwwroot".Length+1))" style="width:75px !important;" class="card-img-top" alt="...">
                          }															</a>
															<div class="ps-2">
																<h6 class="mb-1"><a href="javascript:;" class="text-dark">@item.Product.ProductName</a></h6>
																<div class="widget-product-meta"><span class="me-2">@item.Price</span><span class="">x @item.Quantity</span>
																</div>
															</div>
														</div>
                                                        }
													
													</div>
												</div>
												<div class="card rounded-0 border bg-transparent mb-0 shadow-none">
													<div class="card-body">
														<p class="mb-2">Subtotal: <span class="float-end">$@total_amount</span>
														</p>
														<p class="mb-2">Shipping: <span class="float-end">$@total_delivery</span>
														</p>
														<div class="my-3 border-top"></div>
														<h5 class="mb-0">Order Total: <span class="float-end">$@(total_payment)</span></h5>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
							<!--end row-->
						</div>
					</div>
				</section>
    </div>
  

<script src="https://www.paypal.com/sdk/js?client-id=@paypal_client_id" data-namespace="paypal_sdk"></script>

<script>

 function updateQuantityFromCart()
{   
    var update_item=document.querySelectorAll("#update-quantity-item");
    if(update_item)
    {
        update_item.forEach((item)=>{
          item.addEventListener('click',(e)=>{
         e.preventDefault();  
        var url="@Url.Action("updateCart","Cart")";
        var quantity_values=document.querySelectorAll("#new-quantity-item");
        var formData = new FormData();
        
        const quantities=Array.from(quantity_values).map((item)=>parseInt(item.value));
        
        const product_ids=Array.from(update_item).map((item)=>parseInt(item.getAttribute("data-product-id")));

     quantities.forEach((item, index) => 
{
    formData.append(`quantities[${index}]`, item);
});

        product_ids.forEach((item,index)=>
        {
          formData.append(`product_ids[${index}]`,item);
        });
        
               $.ajax({  
                url: url,
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false, 
                success:function(response)
                { 

                 @* $('#sub-cart-section').html(response); *@

                 window.location.reload();
                },
                error: function (xhr, status, error) 
                {
                document.getElementById("toast-title-error").innerHTML="Error Update Cart";
                document.getElementById("toast-message-error").innerHTML=error;
                var toastEl = document.querySelector('.toast');
                var toast = new bootstrap.Toast(toastEl);
                toast.show();                            
              }
            });
          });
        });
    }
}

function removeItemFromCart()
{
    var remove_item=document.querySelectorAll("#remove-item");
    
    if(remove_item)
    {
        remove_item.forEach((item)=>
        {
         item.addEventListener('click',(e)=>
         {  
           e.preventDefault();
        
           var product_id=item.getAttribute("data-product-id");

           var formData = new FormData();           
 
           formData.append("product_id", product_id);

           var url="@Url.Action("RemoveItemFromCart","Cart")";

          $.ajax({  
                url: url,
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false, 
                success:function(response)
                { 
                 $('#sub-cart-section').html(response);

                 window.location.reload();                                                                                                                                                         
              
                },
                error: function (xhr, status, error) 
                {
                document.getElementById("toast-title-error").innerHTML="Error Remove Cart";
                
                document.getElementById("toast-message-error").innerHTML=error;
                
                var toastEl = document.querySelector('.toast');
                                
                var toast = new bootstrap.Toast(toastEl);                                                
                
                toast.show();                                
              }
            });
         });
        });
    }
}



document.addEventListener("DOMContentLoaded", function() 
{
  removeItemFromCart();
  
  updateQuantityFromCart();  
  
  function getToken()
    {   
        return document.querySelector('input[name="__RequestVerificationToken"]').value;
    }

  var payment_method="@payment_method";

   const user_name="@user_name";
    
    const address="@address";
    
    const phone="@phone";

    const email="@email";
    
    const zipcode="@zipcode";
    
    var total_price="@total_payment";

    var country ="@country";

    var city="@city";

    var state="@state";

    const checkout_obj=
    {
    username:user_name,
    address1:address,
    phonenumber:phone,
    email:email,
    zipcode:zipcode,
    paymentmethod:payment_method
    };

  if(payment_method=="Paypal")
  {
     paypal_sdk.Buttons({
           style:
           {
            layout:'vertical',
            color:'gold',
            tagline:'false',
            size:'responsive',
            shape:'rect'
           },
            createOrder: function(data, actions) 
            { 
              return fetch('/checkout/createOrder',{
                method:'POST',
                headers: 
                {
                 'Content-Type': 'application/json'
                },
                body: JSON.stringify({total_price:total_price,checkout:checkout_obj})
              })
            .then(function(res)
            {   
                
                return res.json();                

            }).then(function(data)
            {    
                  return data.orderId;                      
            })

            },
          onApprove: function(data, actions) 
          {
            return fetch('/checkout/capture?token='+data.orderID)
            .then(function(res) 
            {   
                return res.json();                
            })
            .then(function(details) 
            {  
                if(details.status===1) 
                {  
                   //var checkout = details.checkout;
@*                    
                   var note=document.getElementById("checkout-mess");
                    
                   if(note!=null)
                    {
                        note.value="Đã thanh toán thành công qua Paypal";
                    } *@
                    
                    @* alert(JSON.stringify(checkout_obj)); *@

    var checkout= {
    username:user_name,
    address1:address,
    phonenumber:phone,
    email:email,
    zipcode:zipcode,
    country:country,
    state:state,
    city:city,
    paymentmethod:payment_method
    };
                    return fetch('/checkout/submit',{
                        method:'POST',
                        headers: 
                        {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getToken()
                        },
                        body: JSON.stringify(checkout)
                    });
          
                } 
                else 
                {
                    alert('Payment failed: ' + details.message);
                }
            }).then((response)=>{
             
                var checkout_result_url="@Url.Action("CheckoutResult","Checkout",new{id=HttpContextAccessor.HttpContext.Session.GetString("UserId")})";
                
                alert(checkout_result_url);
                
                window.location.href=checkout_result_url;
            });
        },
            // Handle errors
            onError: function(err) {
                console.error('An error occurred during the transaction', err);                
                @* alert('An error occurred. Please try again.'); *@
            }
        }).render('#checkout-complete');  
      }     
      });
</script>
      