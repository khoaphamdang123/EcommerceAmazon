  @model List<CartModel>
    @{
        int total_value=0;
          
        int total_item=Model.Count;

        Console.WriteLine("model count here:"+Model.Count);
    }
  @if(Model!=null)
  {
    <div class="cart-list">
     @foreach(var cart in Model)
     {
        <div class="d-flex align-items-center gap-3">
          <div class="bottom-product-img">
            <a href="product-details.html">
               @if(cart.Product.Backavatar.Contains("https") || cart.Product.Backavatar.Contains("http"))
              {
                <img src="@cart.Product.Backavatar"  width="60" alt="...">
              }
              else
              {
                <img src="~/@cart.Product.Backavatar.Substring(cart.Product.Backavatar.IndexOf("wwwroot")+("wwwroot".Length+1))" width="60" alt="...">
            }
            </a>
          </div>
          <div class="">
            <h6 class="mb-0 fw-light mb-1">@cart.Product.ProductName</h6>
            <p class="mb-0">Size: @cart.Size</p>
            <p class="mb-0">Color: @cart.Color</p>
            <p class="mb-0"><strong>@cart.Quantity x @cart.Price</strong>
            </p>
          </div>
          <div class="ms-auto fs-5">
            <a href="javascript:" id="remove-item-btn" data-product-id="@cart.Product.Id" class="link-dark"><i class="bi bi-trash"></i></a>
          </div>
        </div>
        <hr>
        }
      </div>
   }
                          
<script>
  var cart=@Html.Raw(Json.Serialize(Model));

function checkout()
{
const checkoutButton = document.getElementById("checkout");

if(checkoutButton)
 {
  if (cart.length === 0) {
    checkoutButton.disabled = true;
    checkoutButton.classList.add("disabled");
  } else 
  {
    checkoutButton.disabled = false;
    checkoutButton.classList.remove("disabled");
  }

if(checkoutButton)
 {
  checkoutButton.addEventListener("click", () => 
  {
   if (cart.length === 0) 
   {
      window.location.href = "@Url.Action("HomePage", "HomePage")";
      return; 
    }
    window.location.href = "@Url.Action("Checkout", "Checkout")";    
  });
 }
}
        
  function attachRemoveButtonListeners() 
{
   
    document.querySelectorAll("#remove-item-btn").forEach((item) => 
    {  
        item.addEventListener("click", () => {
            
            var product_id = item.getAttribute("data-product-id");
            
            var cart_name="view";
            
            let formData = new FormData();

            formData.append("product_id", product_id);

            formData.append("view_name",cart_name);
                        
            $.ajax({
                url: "@Url.Action("removeItemFromCart","Cart")",
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function(response) 
                {
                    $("#sub-cart-item").html(response);

                    $("#offcanvasRightLabel").text("@(total_item-1) items the cart");
                  
                    attachRemoveButtonListeners();
                    
                    checkout();
                    @* var updated_count=$("#count-cart").text();
                    updated_count=parseInt(updated_count)-1;               *@
                    $("#count-cart").text(@total_item-1);
                },
                error: function(xhr, status, error) 
                {
                    @* document.getElementById("toast-title").innerHTML = "Thông báo";
                    document.getElementById("toast-message").innerHTML = xhr.responseText;
                    var toastEl = document.querySelector('.toast');
                    toastEl.classList.add('bg-danger');
                    var toast = new bootstrap.Toast(toastEl); *@
                    //toast.show(); 
                }
            });
        });
    });
}

attachRemoveButtonListeners();
</script>